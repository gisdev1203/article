CKEDITOR wayyyy to expensive

TINYMCE

Photos:
Upload normal like in entry. Can drag & drop from the gallery in the editor. We disable the button Image in the editor so that they can't drag photo from other URL.
They can also drag & drop photo from the desktop. Can be uploaded before submiting the content. 

Comments:
Can be filtered see below server side. The comments have to be stored outside the text.

Footnote and reference.
On the right side panel, we can add manually references or import from a bittext format. 
The custom plugin with a button "Reference, footnote" open a popup. In here you can create a text, and add an existing reference or import one.


Track changes: Use Flite 42$/mois


How to interact between iframe and page:
You can make TinyMCE capture click events via the setup function. The click event provides you with the data on what was clicked and a lot of context that you can then utilize.
 
This example shows how click events can be captured in the editor: https://fiddle.tiny.cloud/Or4JcihS3E/0. You can pass the captured data to your plugin to determine if a clicked object is a footnote.
 
TinyMCE also supports other events you could make use of. You can find the list of available events in the corresponding documentation article.

tinymce.init({
    selector: "textarea",
	setup:  (editor) => {
		editor.on('click', function(event) {
		console.log(event)
				});
		},
		.....
		
		AND check the srcElement !!!!!!!!!!!!!!!!!!!!!!!


How to filter comments :

<script type="text/javascript">
var store = {
	'annotation-607dlp1ek27': {
	  comments: [
		  {uid: 'annotation-607dlp1ek27', author: 'person_1', authorName: 'Person 1', content: 'Comment 1'},
		  {uid: 'annotation-8dfal0zcrkw', author: 'person_1', authorName: 'Person 1', content: 'Comment 2'},
		  {uid: 'annotation-8dfal0zcrka', author: 'person_2', authorName: 'Person 2', content: 'Comment 3'},
		  {uid: 'annotation-8dfal0zcrkc', author: 'person_2', authorName: 'Person 2', content: 'Comment 4'},
	  ],
	  uid: 'annotation-607dlp1ek27'
	}
};



var author = 'Demo';
var authorName = 'Demo User';

var create = function(req, done, fail) {
  if (req.content === 'fail') {
	fail(new Error('Something has gone wrong...'));
  } else {
	var uid = 'annotation-' + randomString();
	store[uid] = {
	  uid,
	  comments: [{
	  	uid: uid,
		author: author,
		authorName: authorName,
		content: req.content
	  }]
	};
	done({
	  conversationUid: uid
	});
  }
};

var reply = function(req, done, fail) {
  var replyUid = 'annotation-' + randomString();
  var current = store[req.conversationUid];
  current.comments = current.comments.concat([
	{
	  uid: replyUid,
	  author: author,
	  authorName: authorName,
	  content: req.content
	}
  ]);
  done({
	commentUid: replyUid
  });
};

var del = function(req, done, fail) {
  delete store[req.conversationUid];
  done({
	canDelete: true
  });
};

var delComment = function(req, done, fail) {
  var current = store[req.conversationUid];
  // Should be supported on browsers ...
  current.comments = current.comments.filter(function (f) {
	return f.uid !== req.commentUid;
  });
  done({
	canDelete: true
  });
};

var editComment = function(req, done, fail) {
  var current = store[req.conversationUid];
  // Should be supported on browsers ...
  current.comments = current.comments.map(function(f) {
	return f.uid === req.commentUid ? {
	  uid: f.uid,
	  author: f.author,
	  content: req.content
	} : f;
  });
  done({
	canEdit: true
  });
};

var deleteAll = function(req, done, fail) {
  Object.keys(store).forEach(function(k) {
	delete store[k];
  });
  done({
	canDelete: true
  });
};



var lookup = function (req, done, fail) {
	var filterComments = store[req.conversationUid].comments.filter((c) => {
	  return c.author === 'person_2';
	});
  done({
	uid: req.conversationUid,
	conversation: {
	  uid: store[req.conversationUid].uid,
	  comments: filterComments
	}
  });
};


tinymce.init({
  selector: 'textarea',
  height: 400,
  toolbar: 'showcomments addcomment',
  plugins: 'tinycomments code',
  tinycomments_create: create,
  tinycomments_reply: reply,
  tinycomments_delete: del,
  tinycomments_delete_all: deleteAll,
  tinycomments_lookup: lookup,
  tinycomments_delete_comment: delComment,
  tinycomments_edit_comment: editComment
});
</script>

<form method="post" action="dump.php">
    <textarea name="content">
	  <p><span class="mce-annotation tox-comment" data-mce-annotation-uid="annotation-607dlp1ek27" data-mce-annotation="tinycomments">Pellentesque habitant morbi tristique</span> senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis. Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus</p>
	</textarea>
</form>





//////////////////////////////////////////////////////////

TinyMCE custom plugin


tinymce.PluginManager.add('example', (editor, url) => {
    editor.ui.registry.addButton('example', {
        text: 'My button',
        onAction: () => {
            editor.insertContent('<a class="footnote">1</a>');
                        
        }
    });
});

tinymce.init({
    selector: 'textarea',
    setup: (editor) => {
        editor.on('click', function (event) {
            console.log(event)
        });
    },
    plugins: 'tinycomments example advcode image',
    toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link table mergetags | align lineheight | tinycomments | checklist numlist bullist indent outdent | emoticons charmap | removeformat | example | code',
    tinycomments_mode: 'embedded',
    tinycomments_author: 'Author name',
    advcode_inline: true,
    branding: false,
    mergetags_list: [
        { value: 'First.Name', title: 'First Name' },
        { value: 'Email', title: 'Email' },
    ],
    image_list: [
        { title: 'My image 1', value: 'https://....photo/large/102_11_70dea_1689789155865_large.jpg' },
        { title: 'My image 2', value: 'https://....photo/large/102_11_63302_1689789156257_large.jpg' }
    ],
    ai_request: (request, respondWith) => respondWith.string(() => Promise.reject("See docs to implement AI Assistant"))
});